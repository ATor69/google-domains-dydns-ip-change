#!/usr/bin/env python3

"""
   Copyright 2016 Matthew Aguirre

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

import dns.resolver
import json
import jsonpickle
import os.path
import re
import urllib.parse
import urllib.request
import xdg.BaseDirectory

class GoogleDomainsConfig(object):
    """Houses all information for connecting to Google Domains for changing Synthetic records."""
    def __init__(self, domainname, username, password, email):
        """Constructor, set all values"""
        self.domainname = domainname
        self.username = username
        self.password = password
        self.email = email

def getServerIP(server):
    """Gets the DNS Specified IP of the requested name."""
    answers = dns.resolver.query(server, 'A')
    return str(answers[0])

def getLocalIP():
    """Get the public IP of the current network (works behind firewall)."""
    url = "http://checkip.dyndns.org"
    request = urllib.request.urlopen(url, timeout=10).read()
    theIP = re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}", str(request))
    if len(theIP) > 0 :
        return theIP[0]

def updateDns(newIp, gdc):
    """Performs a GET which will update the Synthetic DNS record hosted through Google Domains."""
    params = urllib.parse.urlencode({'hostname': gdc.domainname, 'ip': newIp})
    update_url = "https://" + gdc.username + ":" + gdc.password + "@domains.google.com/nic/update?" + str(params)
    opener = urllib.request.FancyURLopener()
    opener.version = "Chrome/41.0 " + gdc.email
    f = opener.open(update_url)

if __name__ == "__main__":
    """TODO: Add ability to add/remove configurations through command line."""
    cfg_dir = xdg.BaseDirectory.xdg_config_home
    cfg_file = "check-ip-change.json"
    cfg_path = os.path.join(cfg_dir, cfg_file)
    # this is going to be ~/.config/check-ip-change.json
    if os.path.isfile(cfg_path):
        local = getLocalIP()
        print ("Local IP: " + local)
        fp = open(cfg_path)
        gdc_list = jsonpickle.decode(fp.read())
        fp.close()
        for gdc in gdc_list:
            server = getServerIP(str(gdc.domainname))
            print ("DNS Specified IP: " + server)
            if local != server:
                print ("Updating DNS Record: " + gdc.domainname + " to " + local)
                updateDns(local, gdc);
                pass
            else:
                print ("No change in DNS record: " + gdc.domainname)
                pass
    else:
        print (cfg_path + ": DOES NOT EXISTS")
